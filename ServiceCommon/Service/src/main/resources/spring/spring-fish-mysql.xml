<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

    <!-- user库配置信息 -->

    <!-- 读库 -->
    <bean id="maReadDataSource" class="org.apache.ibatis.datasource.unpooled.UnpooledDataSource">
        <property name="username" value="${ma.read.mysql.username}"/>
        <property name="password" value="${ma.read.mysql.password}"/>
        <property name="driver" value="${ma.read.mysql.driver}"/>
        <property name="url" value="${ma.read.mysql.url}"/>
    </bean>

    <bean name="mybatisMaReadSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="maReadDataSource"/>
        <property name="configLocation" value="classpath:/mybatisConfig/mybatis-config.xml"/>
        <property name="typeHandlersPackage" value="com.hk.common.mybatis.typehandler"/>
    </bean>
    <bean name="myBatisMaReadTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="mybatisMaReadSqlSessionFactory"/>
    </bean>
    <bean name="mybatisMaReadTemplateBatch" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="mybatisMaReadSqlSessionFactory"/>
        <constructor-arg value="BATCH"/>
    </bean>
    <bean name="maReadDao" class="com.hk515.common.dao.GenericMyBatisDao">
        <property name="mybatisTemplate" ref="myBatisMaReadTemplate"/>
    </bean>

    <bean name="maBatchDao" class="com.hk515.common.dao.GenericMyBatisDao">
        <property name="mybatisTemplate" ref="mybatisMaReadTemplateBatch"/>
    </bean>

    <!-- 写库 -->
    <bean id="maWriteDataSource" class="org.apache.ibatis.datasource.unpooled.UnpooledDataSource">
        <property name="username" value="${ma.write.mysql.username}"/>
        <property name="password" value="${ma.write.mysql.password}"/>
        <property name="driver" value="${ma.write.mysql.driver}"/>
        <property name="url" value="${ma.write.mysql.url}"/>
    </bean>

    <bean name="mybatisMaWriteSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="maWriteDataSource"/>
        <property name="configLocation" value="classpath:/mybatisConfig/mybatis-config.xml"/>
        <property name="typeHandlersPackage" value="com.hk.common.mybatis.typehandler"/>
    </bean>
    <bean name="myBatisMaWriteTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="mybatisMaWriteSqlSessionFactory"/>
    </bean>
    <bean name="mybatisMaWriteTemplateBatch" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="mybatisMaWriteSqlSessionFactory"/>
        <constructor-arg value="BATCH"/>
    </bean>
    <bean name="maWriteDao" class="com.hk515.common.dao.GenericMyBatisDao">
        <property name="mybatisTemplate" ref="myBatisMaWriteTemplate"/>
    </bean>

    <bean name="maWriteBatchDao" class="com.hk515.common.dao.GenericMyBatisDao">
        <property name="mybatisTemplate" ref="mybatisMaWriteTemplateBatch"/>
    </bean>

    <!-- 事务管理器 -->
    <bean name="maWriteTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="maWriteDataSource"/>
    </bean>

    <!-- 事务管理器模板 -->
    <bean name="maWriteTransactionTemplate"
          class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="maWriteTransactionManager"/>
    </bean>
	 
	<!--  注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="maWriteTransactionManager"
		proxy-target-class="true" />

	<tx:advice id="txAdvice" transaction-manager="maWriteTransactionManager">
		<tx:attributes>
			<tx:method name="add*" rollback-for="Exception" />
			<tx:method name="delete*" rollback-for="Exception" />
			<tx:method name="edit*" rollback-for="Exception" />
			<tx:method name="save*" rollback-for="Exception"/>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="send*" rollback-for="Exception" />
			<tx:method name="batch*" rollback-for="Exception"/>
			<tx:method name="revert*" rollback-for="Exception"/>
			<tx:method name="modfiy*" rollback-for="Exception"/>
			<tx:method name="activation*" rollback-for="Exception"/>
			<tx:method name="get*"  read-only="true"/>
			<tx:method name="query*"  read-only="true"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="export*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.hk.hyk.sys.service..*.*(..))" />
	</aop:config>
    
</beans>