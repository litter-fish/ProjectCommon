集群容错模式：

Failover Cluster

    失败自动切换，当出现失败，重试其它服务器。(缺省)
    通常用于读操作，但重试会带来更长延迟。
    可通过retries="2"来设置重试次数(不含第一次)。

Failfast Cluster

    快速失败，只发起一次调用，失败立即报错。
    通常用于非幂等性的写操作，比如新增记录。

Failsafe Cluster

    失败安全，出现异常时，直接忽略。
    通常用于写入审计日志等操作。

Failback Cluster

    失败自动恢复，后台记录失败请求，定时重发。
    通常用于消息通知操作。

Forking Cluster

    并行调用多个服务器，只要一个成功即返回。
    通常用于实时性要求较高的读操作，但需要浪费更多服务资源。
    可通过forks="2"来设置最大并行数。

Broadcast Cluster

    广播调用所有提供者，逐个调用，任意一台报错则报错。(2.1.0开始支持)
    通常用于通知所有提供者更新缓存或日志等本地资源信息。


负载均衡

Random LoadBalance

    随机，按权重设置随机概率。
    在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。

RoundRobin LoadBalance

    轮循，按公约后的权重设置轮循比率。
    存在慢的提供者累积请求问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。

LeastActive LoadBalance

    最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。
    使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。

ConsistentHash LoadBalance

    一致性Hash，相同参数的请求总是发到同一提供者。
    当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。
    算法参见：http://en.wikipedia.org/wiki/Consistent_hashing。
    缺省只对第一个参数Hash，如果要修改，请配置<dubbo:parameter key="hash.arguments" value="0,1" />
    缺省用160份虚拟节点，如果要修改，请配置<dubbo:parameter key="hash.nodes" value="320" />



dubbo 暴露服务过程
1. ServiceConfig类拿到对外提供服务的实际类ref

2. 调用ProxyFactory的getInvoke方法将ref转换为AbstractProxyInvoke实例

3. 调用DubboProtocol的export方法将Invoke转为export实例，主要是打开一个socket的长连接，如果配置了注册中心，会将URL报错到注册中心中，保存路径以zookeeper为例：

注册中心中如果配置了group属性，则目录为、/${group}/ref/p、c.../url




dubbo 服务消费

1. 调用ReferenceConfig的init方法将远程服务转换为Invoke实例

2. 调用ProxyFactory的getProxy方法将Invoke转换为客户端所需要的接口


http://blog.csdn.net/hzzhoushaoyu/article/details/43273099

ProtocolFilterWrapper



Redis 内存淘汰机制















装饰模式: 动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。

装饰模式的用意是在不改变接口的前提下，增强所考虑的类的性能

InputStream

1. 抽象构件(Component)角色：由InputStream扮演。这是一个抽象类，为各种子类型提供统一的接口。
2. 具体构件(ConcreteComponent)角色：由ByteArrayInputStream、FileInputStream、PipedInputStream、StringBufferInputStream等类扮演。它们实现了抽象构件角色所规定的接口。
3. 抽象装饰(Decorator)角色：由FilterInputStream扮演。它实现了InputStream所规定的接口。
4. 具体装饰(ConcreteDecorator)角色：由几个类扮演，分别是BufferedInputStream、DataInputStream以及两个不常用到的类LineNumberInputStream、PushbackInputStream。


OutputStream

1. 抽象构件(Component)角色：由OutputStream扮演。这是一个抽象类，为各种子类型提供统一的接口。
2. 具体构件(ConcreteComponent)角色：由ByteArrayOutputStream、FileOutputStream、ObjectOutputStream、PipedOutputStream等类扮演。它们实现了抽象构件角色所规定的接口。
3. 抽象装饰(Decorator)角色：由FilterOutputStream扮演。它实现了OutputStream所规定的接口。
4. 具体装饰(ConcreteDecorator)角色：由几个类扮演，分别是BufferedOutputStream、CheckedOutputStream、CipheOutputSteam、DataOutputStream等类扮演。


Reader

1. 抽象构件(Component)角色：由Reader扮演。这是一个抽象类，为各种子类型提供统一的接口。
2. 具体构件(ConcreteComponent)角色：由CharArayReader、FilterReader、InputStreamReader、PipedReader、StringReader扮演。它们实现了抽象构件角色所规定的接口。
3. 抽象装饰(Decorator)角色：由BufferedReader 、FilterReader、InputStreamReader扮演。它实现了Reader所规定的接口。
4. 具体装饰(ConcreteDecorator)角色：由几个类扮演，分别是LineNumberReader、PushbackReader、FileReader扮演。


Writer

1. 抽象构件(Component)角色：由Writer扮演。这是一个抽象类，为各种子类型提供统一的接口。
2. 具体构件(ConcreteComponent)角色：由BufferedWriter、CharArrayWriter、FilterWriter、OutputStreamWriter、PipedWriter、PrintWriter、StringWriter扮演。
    它们实现了抽象构件角色所规定的接口。
3. 抽象装饰(Decorator)角色：由OutputStreamWriter扮演。它实现了Writer所规定的接口。
4. 具体装饰(ConcreteDecorator)角色：由FileWriter扮演。



自定义注解
元注解：
@Target：标记一个注解的作用范围，可以作用于
    1. TYPE: Class, interface (including annotation type), or enum declaration
    2. FIELD：Field declaration (includes enum constants)
    3. METHOD：Method declaration
    4. PARAMETER：Parameter declaration
    5. CONSTRUCTOR：Constructor declaration
    6. LOCAL_VARIABLE：Local variable declaration
    7. ANNOTATION_TYPE：Annotation type declaration
    8. PACKAGE：Package declaration

@Runtention:标记注解保留的时间，可选，
    1. SOURCE：源码阶段可见，编译阶段被忽略
    2. CLASS：编译阶段可见
    3. RUNTIME：运行时可见

@Documented:用于生成文档

@Inherited:表示被该注解标示的类，可以被继承获取



